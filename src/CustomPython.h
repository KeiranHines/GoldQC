/* Generated by Cython 0.26 */

#ifndef __PYX_HAVE__CustomPython
#define __PYX_HAVE__CustomPython


/* "CustomPython.pyx":79
 * XF_CLEANUP:99 - Called before the DLL is unloaded.
 * """
 * ctypedef public enum XFMethodID:             # <<<<<<<<<<<<<<
 *     XF_PYCOMPILE_ERR = -9
 *     XF_INITIALIZE = 0
 */
enum XFMethodID {
  XF_PYCOMPILE_ERR = -9L,
  XF_INITIALIZE = 0,
  XF_CALCULATE = 1,
  XF_REP_VERSION = 2,
  XF_REP_ARGUMENTS = 3,
  XF_CLEANUP = 99
};
typedef enum XFMethodID XFMethodID;

/* "CustomPython.pyx":102
 * """
 * 
 * ctypedef public enum XFStatusID:             # <<<<<<<<<<<<<<
 *     XF_SUCCESS = 0
 *     XF_FAILURE = 1
 */
enum XFStatusID {
  XF_SUCCESS = 0,
  XF_FAILURE = 1,
  XF_CLEANUP_NOW = 99,
  XF_FAILURE_WITH_MSG = -1L,
  XF_INCREASE_MEMORY = -2L
};
typedef enum XFStatusID XFStatusID;

#ifndef __PYX_HAVE_API__CustomPython

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(_T) _T
#endif

__PYX_EXTERN_C void ReturnErrorMsg(int, double *);
__PYX_EXTERN_C int InitRoutines(void);
__PYX_EXTERN_C double ReturnCustomModuleVersion(void);
__PYX_EXTERN_C int NumInputsExpected(void);
__PYX_EXTERN_C int NumOutputsToProvide(void);
__PYX_EXTERN_C void WrapUpSimulation(void);
__PYX_EXTERN_C int DoCalcsAndReturnValues(double *, double *);
__PYX_EXTERN_C void PyCompileError(void);

#endif /* !__PYX_HAVE_API__CustomPython */

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initCustomPython(void);
#else
PyMODINIT_FUNC PyInit_CustomPython(void);
#endif

#endif /* !__PYX_HAVE__CustomPython */
